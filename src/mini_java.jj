
PARSER_BEGIN(MyParser)

import Canon.*;
import syntaxtree.*;
import syntaxtree.visitor.*;
import IRTree.*;
import Temp.*;
import utils.*;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;

public class MyParser {
    public static void main(String[] args) throws Exception, ParseException, TokenMgrError{

        ArrayList<String> filenames = new ArrayList<String>();
        filenames.add("./src/testes/teste.txt");
        filenames.add("./src/testes/Factorial.txt");
        filenames.add("./src/testes/TreeVisitor.txt");
        filenames.add("./src/testes/BinaryTree.txt");
        filenames.add("./src/testes/BubbleSort.txt");
        filenames.add("./src/testes/BynarySearch.txt");
        filenames.add("./src/testes/LinearSearch.txt");
        filenames.add("./src/testes/LinkedList.txt");
        filenames.add("./src/testes/QuickSort.txt");

//        testaArquivosAnaliseLexSint(filenames);

        try {
            // soh da problema quando tento o arquivo de indice 2 (TreeVisitor.txt)
            Program raiz = new MyParser(new StringReader(readFile(filenames.get(6)))).Prog();

            DepthFirstVisitor visitorTabela = new DepthFirstVisitor();
            raiz.accept(visitorTabela);

            TypeDepthFirstVisitor visitorTipo = new TypeDepthFirstVisitor(visitorTabela);
            raiz.accept(visitorTipo);

            Mips.MipsFrame frameTeste = new Mips.MipsFrame();
            IRVisitor visitorIntermediario = new IRVisitor(visitorTipo, frameTeste);
            raiz.accept(visitorIntermediario);

            ArrayList<Frag> frags = visitorIntermediario.fragmentos;
            for (int i = 0; i < frags.size(); ++i) {
                Frag atual = frags.get(i);

                Tree.Print h = new Tree.Print(System.out, new CombineMap(atual.frame, new DefaultMap()));

                System.out.println("\n\nFUNCAO: " + atual.nome);

                System.out.println("\nSem canonizar:\n");
                h.prStm(atual.body);

                System.out.println("\nCanonizado:\n");
                Tree.StmList statements = Canon.linearize(atual.body);
                for (Tree.StmList c = statements; c != null; c = c.tail) {
                    h.prStm(c.head);
                }

                // TODO: printar os dois abaixo
                BasicBlocks b = new BasicBlocks(statements);
                Tree.StmList t = (new TraceSchedule(b)).stms;

                List<Assem.Instr> instrucoes = ((Mips.MipsFrame) atual.frame).codegen(Converter.StmListToArray(t));

                System.out.println("\nInstrucoes:\n");
                for (int j = 0; j < instrucoes.size(); ++j) {
                    System.out.println(instrucoes.get(j).format(h.tmap));
                }

                System.out.println("\nFLUXO:\n");
                Graph.AssemFlowGraph fluxo = new Graph.AssemFlowGraph(instrucoes);
                fluxo.show(System.out);
            }

        } catch (ParseException e) {
            System.out.println(e.toString());
        }

    }

    private static void testaArquivosAnaliseLexSint(ArrayList<String> filenames) throws Exception {
        MyParser parser = new MyParser(new StringReader(""));
        for (String nome : filenames) {
            try {
                String file = readFile(nome);
                parser.ReInit(new StringReader(file));

                System.out.println("\nLENDO " + nome + "\n");

                List<Token> tokens = analiseLexica(parser, file);
                String resultadoAnaliseSintatica = analiseSintatica(parser, file);
                if (resultadoAnaliseSintatica.equals("")) {
                    System.out.println("\nSINTAXE OK\n");
                } else {
                    System.out.println("\nSINTAXE FALHA: " + resultadoAnaliseSintatica + "\n");
                }
                parser.ReInit(new StringReader(file));
            } catch (Exception e) {
                System.out.println("erro: " + e.getCause());
            }
        }
    }

    private static ArrayList<Token> analiseLexica(MyParser parser, String input) throws TokenMgrError {
        parser.ReInit(new StringReader(input));
        ArrayList<Token> tokens = new ArrayList<Token>();

        // analise lexica
        try {
            while (true) {
                Token token = parser.getNextToken();
                if (token.kind == 0) {
                    break;
                }
                tokens.add(token);
                // exibir token atual
                System.out.println("Token atual: " + token.image);
            }
        } catch (TokenMgrError e) {
            // informações do token quando ocorrer um erro léxico
            System.out.println("Erro lexico: " + e.getMessage());
            System.out.println("Tokens correspondidos:");
            for (Token token : tokens) {
                System.out.println("Linha " + token.beginLine + ", Coluna " + token.beginColumn +
                        ": Imagem: \"" + token.image + "\", Kind: " + token.kind);
            }
        }

        return tokens;
    }

    private static String analiseSintatica(MyParser parser, String input) {
        String res = "";
        try {
            parser.ReInit(new StringReader(input));
            parser.Prog();
            return res;
        } catch (Throwable e) {
            return e.getMessage();
        }
    }

    private static String readFile(String filePath) throws Exception {
        File file = new File(filePath);
        BufferedReader reader = new BufferedReader(new FileReader(file));
        String line;
        StringBuilder stringBuilder = new StringBuilder();
        while ((line = reader.readLine()) != null) {
            stringBuilder.append(line);
            stringBuilder.append(System.lineSeparator());
        }
        reader.close();
        return stringBuilder.toString();
    }

}

PARSER_END(MyParser)


SKIP :
{ " "
| "\t"
| "\r"
| "\n"
| < "//" (~["\n","\r"])* ("\n" | "\r\n" | "\r") >
| < "/*" (~[])* "*/" >

}
TOKEN :
{ < WHILE: "while" >
| < IF: "if" >
| < THEN: "then" >
| < ELSE: "else" >
| < SEMI: ";" >
| < ASSIGN: "=" >
| < CLASS: "class" >
| < PUBLIC: "public" >
| < STATIC: "static" >
| < VOID: "void" >
| < MAIN: "main" >
| < NEW: "new" >
| < EXTENDS: "extends" >
| < RETURN: "return" >
| < STRING: "String" >
| < INT: "int" >
| < BOOLEAN: "boolean" >
| < PRINT: "System.out.println" >
| < LENGTH: "length" >
| < TRUE: "true" >
| < FALSE: "false" >
| < THIS: "this" >
| < OP_AND: "&&" >
| < OP_LESS: "<" >
| < OP_ADD: "+" >
| < OP_SUB: "-" >
| < OP_MULT: "*" >
| < #LETTER : ["A"-"Z"] | ["a"-"z"] >
| < ID: <LETTER> (<LETTER> | ["0"-"9"] | "_")* >
| < INTEGER_LITERAL : ["0"-"9"] (["0"-"9"])* >
}

// FEITO
Program Prog() :
{
    MainClass mc;
    ClassDecl cd;
    ClassDeclList cl = new ClassDeclList();
}
{
    mc = MainClass()
    (cd = ClassDeclaration() {cl.addElement(cd);})*
    <EOF>

    {return new Program(mc, cl);}
}

// FEITO
MainClass MainClass() :
{
    Identifier ci, ma;
    Statement s;
}
{
    <CLASS> ci = ID() "{"
        <PUBLIC> <STATIC> <VOID> <MAIN> "(" <STRING> "[" "]" ma = ID() ")" "{"
            s = Statement()
        "}"
    "}"

    {return new MainClass(ci, ma, s);}
}

// FEITO
ClassDecl ClassDeclaration() :
{
    Identifier id1, id2 = null;
    VarDecl vd; VarDeclList vl = new VarDeclList();
    MethodDecl md; MethodDeclList ml = new MethodDeclList();
}
{
    <CLASS> id1 = ID()
    (<EXTENDS> id2 = ID())? "{"
        (vd = VarDeclaration() {vl.addElement(vd);})* (md = MethodDeclaration() {ml.addElement(md);})*
    "}"

    {return (id2 == null) ? new ClassDeclSimple(id1, vl, ml) : new ClassDeclExtends(id1, id2, vl, ml);}
}

// FEITO
VarDecl VarDeclaration() :
{
    Type t; Identifier i;
}
{
    t = Type() i = ID() <SEMI>

    {return new VarDecl(t, i);}
}

// FEITO
MethodDecl MethodDeclaration() :
{
    Type t, taux; Identifier i, iaux; Exp e; MethodDecl md; VarDecl vd; Statement st;

    FormalList fl = new FormalList(); VarDeclList vl = new VarDeclList(); StatementList sl = new StatementList();
}
{
    <PUBLIC> t = Type() i = ID() "("
        (taux = Type() iaux = ID() {fl.addElement(new Formal(taux, iaux));} ( "," taux = Type() iaux = ID() {fl.addElement(new Formal(taux, iaux));})* )?
    ")" "{"
        (LOOKAHEAD(2) vd = VarDeclaration() {vl.addElement(vd);})*
        (st = Statement() {sl.addElement(st);})*
        "return" e = Expression() <SEMI>
    "}"
    {return new MethodDecl(t, i, fl, vl, sl, e);}
}

// FEITO, VER SE O ID FUNCIONA
Type Type() :
{
    Identifier id;
}
{
    LOOKAHEAD(3)
    <INT> "[" "]" {return new IntArrayType();}
    | <INT> {return new IntegerType();}
    | <BOOLEAN> {return new BooleanType();}
    | id = ID() {return new IdentifierType(id.toString());} // ver se da certo
}

Statement Statement() :
{
   Statement s, s2;
   Exp e, e2; Identifier id;
   StatementList sl = new StatementList();
}
{
    "{" (s = Statement() {sl.addElement(s);})* "}" { return new Block(sl); }
    | <IF> "(" e = Expression() ")" s = Statement() <ELSE> s2 = Statement() { return new If(e, s, s2); }
    | <WHILE> "(" e = Expression() ")" s = Statement() { return new While(e, s); }
    | <PRINT> "(" e = Expression() ")" <SEMI> { return new Print(e); }
    | LOOKAHEAD(2) // coloquei de 6 para 2
      id = ID() "=" e = Expression() <SEMI> { return new Assign(id, e); }
    | id = ID() "[" e = Expression() "]" "=" e2 = Expression() <SEMI> { return new ArrayAssign(id, e, e2); }
}

Exp Expression() :
{
    Exp e1;
}
{
    e1 = Expr1() (LOOKAHEAD(2) e1 = Expr2(e1))* // ((((a+b)+c)+d)+e)
    { return e1; }
}

Exp Expr1() :
{
    Exp e, e2;
    Token t;
    Identifier id;
}
{
    <THIS> { e = new This(); return e; }
    | <TRUE> { e = new True(); return e; }
    | <FALSE> { e = new False(); return e; }
    | t = <INTEGER_LITERAL> { e = new IntegerLiteral(Integer.parseInt(t.image)); return e; }
    | id = ID() { e = new IdentifierExp(id.toString()); return e; }
    | "!" e2 = Expression() { e = new Not(e2); return e; }
    | "(" e2 = Expression() ")" { e = e2; return e; }
    | LOOKAHEAD(2) // lookahead aumentado em 1
      <NEW> <INT> "[" e2 = Expression() "]" { e = new NewArray(e2); return e; }
    | <NEW> id = ID() "(" ")" { e = new NewObject(id); return e; }
}

Exp Expr2(Exp left_exp) :
{
    Exp right_exp; Exp final_exp;
    Identifier id;
    ExpList el = new ExpList();
}
{
    "&&" right_exp = Expression() { return new And(left_exp, right_exp); }
    | "<" right_exp = Expression() { return new LessThan(left_exp, right_exp); }
    | "+" right_exp = Expression() { return new Plus(left_exp, right_exp); }
    | "-" right_exp = Expression() { return new Minus(left_exp, right_exp); }
    | "*" right_exp = Expression() { return new Times(left_exp, right_exp); }
    | "[" right_exp = Expression() "]" { return new ArrayLookup(left_exp, right_exp); }
    | LOOKAHEAD(2) // lookahead aumentado em 1
      "." <LENGTH> { return new ArrayLength(left_exp); }
    | "." id = ID() "(" ( right_exp = Expression() { el.addElement(right_exp);}
        ( "," right_exp = Expression() { el.addElement(right_exp);} )* )? ")" { return new Call(left_exp, id, el); }
}

// FEITO
Identifier ID() : {Token t;}
{ t = <ID> {return new Identifier(t.image);}}